package com.tiltdigital.swiz.beans.audio.model {	import com.tiltdigital.swiz.beans.audio.vo.AudioVO;	import com.tiltdigital.log.Logger;	import flash.media.*;	import flash.events.EventDispatcher;

	/**	 * @author Jamie	 */	public class AudioChannels	{		/**		 * Array to hold all SoundChannels		 */		private var _channels 				: Array;		/**		 * Constructor --		 */		public function AudioChannels ()		{			clear();		}								//______________________________________________________________________________ PUBLIC METHODS						/**		 * Reset the MixerChannels		 */		public function clear() : void		{			_channels	= new Array();		}								/**		 * Adds an AudioVO to the AudioMixer		 * 		 * @param vo				The AudioVO to add to the mixer		 * @return SoundChannel		returns the SoundChannel for attaching event listeners explicitly		 */		public function add ( vo:AudioVO ) : void		{			if( channelsAvailable() )			{				if( contains( vo ))					Logger.warning( "MixerChannels.add ( "+vo.id+" :: already added to mixer! )" );					_channels.push( vo );			}		}								/**		 * Retrieves an AudioVO from the AudioMixer		 * 		 * @param id		The id of the AudioVO we're removing		 * 		 * @return AudioVO	The AudioVO we requested		 */		public function get ( id:String ) : AudioVO		{			var vo:AudioVO;			vo = ( getValueObjectById( id ) as AudioVO );						if( vo == null )				Logger.warning( "MixerChannels.get ( "+id+"'s channel does not exist! )" );							return vo;		}								/**		 * Removes an AudioVO from MixerChannels		 * 		 * @param vo		AudioVO id - either id as String, or AudioVO instance		 */		public function remove ( vo:* ) : void		{			var _vo:AudioVO;						_vo = (( vo is String ) ? getValueObjectById( vo ) : vo ) as AudioVO;						if( _vo == null )			{				Logger.warning( "MixerChannels.remove ( "+_vo.id+" does not exist - No need to remove! )" );							} else removeVO( _vo );		}								/**		 * Check if the channels contain the requested AudioVO		 * 		 * @param vo		AudioVO to check for		 */		public function contains ( vo:AudioVO ) : Boolean		{			return ( _channels.indexOf( vo ) != -1 );		}								/**		 * Retrieves an array of all currently channelled sound objects		 */		public function toArray () : Array		{			return _channels;		}								//___________________________________________________________________________________ PRIVATE METHODS								/**		 * Array contains a AudioVO with the specified id		 * 		 * @param id			Id of the AudioVO we're looking for		 * 		 * @return LoaderVO		Returns the AudioVO as specified by it's id, or null		 */		private function getValueObjectById( id:String ) : AudioVO 		{			var vo:AudioVO;						for each( vo in _channels )			{				if( vo.id == id ) 				{					return vo;					break;				}			}			return null;		}						/**		 * Remove an AudioVO from the Mixer		 * 		 * @param vo		AudioVO to remove		 */		private function removeVO( vo:AudioVO ) : void		{			_channels.splice( _channels.indexOf( vo ));		}								/**		 * Test whether there are still channels available for use		 */		private function channelsAvailable() : Boolean		{			var _channelsAvailable:Boolean;						_channelsAvailable = ( _channels.length < AudioSettings.MAX_CHANNELS );						if( !_channelsAvailable ) Logger.error( "AudioChannels.channelAvailable ? " + _channelsAvailable );						return _channelsAvailable;		}	}}